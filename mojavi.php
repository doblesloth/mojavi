<?php

// +---------------------------------------------------------------------------+
// | This file is part of the Mojavi package.                                  |
// | Copyright (c) 2003, 2004 Sean Kerr.                                       |
// |                                                                           |
// | For the full copyright and license information, please view the LICENSE   |
// | file that was distributed with this source code. You can also view the    |
// | LICENSE file online at http://www.mojavi.org.                             |
// +---------------------------------------------------------------------------+

/**
 * Pre-initialization script.
 *
 * @package mojavi
 *
 * @author    Sean Kerr (skerr@mojavi.org)
 * @copyright (c) Sean Kerr, {@link http://www.mojavi.org}
 * @since     3.0.0
 * @version   $Id: mojavi.php 645 2004-12-10 14:35:36Z seank $
 */

/**
 * Include the global_funcs.php file.
 * This file should be in the same directory as this file (mojavi.php) and should contain
 * global functions for use on all projects.
 */
require_once(dirname(__FILE__) . "/global_funcs.php");

/**
 * Handles autoloading of classes that have been specified in autoload.ini.
 *
 * @param string A class name.
 *
 * @return void
 *
 * @author Sean Kerr (skerr@mojavi.org)
 * @since  3.0.0
 */
function __autoload ($class)
{

    // this static variable is generated by the $config file below
    static $classes;

    if (!isset($classes))
    {

        try
        {

            // include the list of autoload classes
            $config = ConfigCache::checkConfig('config/autoload.ini');

        } catch (MojaviException $e)
        {

            $e->printStackTrace();

        } catch (Exception $e)
        {

            // unknown exception
            $e = new MojaviException($e->getMessage());

            $e->printStackTrace();

        }
		
        require_once($config);

    }

    if (!isset($classes[$class]))
    {
    	// Destroy the session completely
		session_destroy();
		
        // unspecified class
        $error = 'Autoloading of class "%s" failed';
        $error = sprintf($error, $class);
        $e = new AutoloadException($error);
        $e->printStackTrace();
        LoggerManager::fatal("Clearing cache because of Autoload Exception: " . $class);
        LoggerManager::fatal($e->printStackTrace(""));
        LoggerManager::fatal($config);
        
        // Clear the cache
		ConfigCache::clear();
        
        if (in_array(session_name(), $_COOKIE)) {
        	if (file_exists("/tmp/sess_" . $_COOKIE[session_name()])) {
        		try {
        			unlink("/tmp/sess_" . $_COOKIE[session_name()]);
        		} catch (Exception $e) {
        			$e = new MojaviException($e->getMessage());
        			$e->printStackTrace("");
        		}
        	}
        }
    }

	// class exists, let's include it
    require_once($classes[$class]);
}

try
{

    error_reporting(E_ALL | E_STRICT);

    // ini settings
    ini_set('arg_separator.output',      '&amp;');
    ini_set('display_errors',            1);
    ini_set('magic_quotes_runtime',      0);
    ini_set('unserialize_callback_func', '__autoload');

    // define a few filesystem paths
    define('MO_CONFIG_DIR',   MO_WEBAPP_DIR . '/config');
    define('MO_LIB_DIR',      MO_WEBAPP_DIR . '/lib');
    define('MO_MODULE_DIR',   MO_WEBAPP_DIR . '/modules');
    define('MO_TEMPLATE_DIR', MO_WEBAPP_DIR . '/templates');

    // required files
    require_once(MO_APP_DIR . '/version.php');

    // required classes for this file and ConfigCache to run
    require_once(MO_APP_DIR . '/core/MojaviObject.class.php');
	require_once(MO_APP_DIR . '/util/Errors.class.php');
    require_once(MO_APP_DIR . '/util/ParameterHolder.class.php');
    require_once(MO_APP_DIR . '/config/ConfigCache.class.php');
    require_once(MO_APP_DIR . '/config/ConfigHandler.class.php');
    require_once(MO_APP_DIR . '/config/ParameterParser.class.php');
    require_once(MO_APP_DIR . '/config/IniConfigHandler.class.php');
    require_once(MO_APP_DIR . '/config/AutoloadConfigHandler.class.php');
	require_once(MO_APP_DIR . '/config/LoggingConfigHandler.class.php');
    require_once(MO_APP_DIR . '/config/RootConfigHandler.class.php');
    require_once(MO_APP_DIR . '/exception/MojaviException.class.php');
    require_once(MO_APP_DIR . '/exception/AutoloadException.class.php');
    require_once(MO_APP_DIR . '/exception/CacheException.class.php');
    require_once(MO_APP_DIR . '/exception/ConfigurationException.class.php');
    require_once(MO_APP_DIR . '/exception/ParseException.class.php');
    require_once(MO_APP_DIR . '/util/Toolkit.class.php');

    // clear our cache if the conditions are right
    if (MO_DEBUG)
    {
    	error_log("================================ Clearing Cache ====================================");
        ConfigCache::clear();

    }

    // load base settings
    ConfigCache::import('config/settings.ini');

    // required classes for the framework
    ConfigCache::import('config/compile.conf');

} catch (MojaviException $e)
{

    $e->printStackTrace();

} catch (Exception $e)
{

    // unknown exception
    $e = new MojaviException($e->getMessage());

    $e->printStackTrace();

}

?>