<?php

// +---------------------------------------------------------------------------+
// | This file is part of the Mojavi package.                                  |
// | Copyright (c) 2003, 2004 Sean Kerr.                                       |
// |                                                                           |
// | For the full copyright and license information, please view the LICENSE   |
// | file that was distributed with this source code. You can also view the    |
// | LICENSE file online at http://www.mojavi.org.                             |
// +---------------------------------------------------------------------------+

/**
 * AutoloadConfigHandler allows you to specify a list of classes that will
 * automatically be included for you upon first use.
 *
 * @package    mojavi
 * @subpackage config
 *
 * @author    Sean Kerr (skerr@mojavi.org)
 * @copyright (c) Sean Kerr, {@link http://www.mojavi.org}
 * @since     3.0.0
 * @version   $Id: AutoloadConfigHandler.class.php 319 2004-11-12 21:34:22Z seank $
 */
class AutoloadConfigHandler extends IniConfigHandler
{

    // +-----------------------------------------------------------------------+
    // | METHODS                                                               |
    // +-----------------------------------------------------------------------+

    /**
     * Execute this configuration handler.
     *
     * @param string An absolute filesystem path to a configuration file.
     *
     * @return string Data to be written to a cache file.
     *
     * @throws <b>ConfigurationException</b> If a requested configuration file
     *                                       does not exist or is not readable.
     * @throws <b>ParseException</b> If a requested configuration file is
     *                               improperly formatted.
     *
     * @author Sean Kerr (skerr@mojavi.org)
     * @since  3.0.0
     */
    public function & execute ($config)
    {

        // set our required categories list and initialize our handler
        $categories = array('required_categories' => array('autoload'));

        $this->initialize($categories);

        // parse the ini
        $ini = $this->parseIni($config);

        // init our data array
        $data = array();

        // let's do our fancy work
        foreach ($ini['autoload'] as $class => &$file)
        {
			$file = $this->replaceConstants($file);
            $file = $this->replacePath($file);
	
            if (!is_readable($file) && !is_dir($file)) {
            	if (substr($file, -1) != "/" && substr($file, -1) != "\\") { // Check that it's not a folder path that is empty
            	
            	    // the class path doesn't exist
	                $error = 'Configuration file "%s" specifies class "%s" with ' .
	                         'nonexistent or unreadable file "%s"';
	                $error = sprintf($error, $config, $class, $file);
	
	                throw new ParseException($error);
            	}

            }

			if (is_dir($file)) {
				if ($dh = opendir($file)) {
					while (($fh = readdir($dh)) !== false) {
						
						if (preg_match("/^\./",$fh) == 0) {
							$tmp    = "\$classes['%s'] = '%s';";
							$filename = $file . $fh;
							if (is_readable($filename) && !is_dir($filename)) {	
								#remove normal suffices
								$fh_class = preg_replace("/\.class\.php/","",$fh);
								
								if (strpos($class, 'MOJAVI') === false) {
									$data[] = sprintf($tmp, $class . '_' . $fh_class, $filename);
								} else {
									$data[] = sprintf($tmp, $fh_class, $filename);	
								}
							}
						}
					}
					closedir($dh);
				}
			} else if (is_readable($file)) {	
	            $tmp    = "\$classes['%s'] = '%s';";
	            $fh_class = preg_replace("/\.class\.php/","",basename($file));
	            $data[] = sprintf($tmp, $fh_class, $file);
			} else {
				$tmp    = "// \$classes['%s'] = '%s';";
	            $data[] = sprintf($tmp, $class, $file);
			}

        }

        // compile data
        $retval = "<?php\n" .
                  "// auth-generated by AutoloadConfigHandler\n" .
                  "// date: %s\n%s\n?>";
        $retval = sprintf($retval, date('m/d/Y H:i:s'), implode("\n", $data));

        return $retval;

    }

}

?>