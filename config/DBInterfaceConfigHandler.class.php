<?php
/**
 * DBInterfaceConfigHandler allows you to create an interace based on a table in the db
 *
 * @author    Mark Hobson
 */
class DBInterfaceConfigHandler extends IniConfigHandler {

	private $databaseManager;

	// +-----------------------------------------------------------------------+
	// | METHODS                                                               |
	// +-----------------------------------------------------------------------+

	/**
	 * Execute this configuration handler.
	 *
	 * @param string An absolute filesystem path to a configuration file.
	 * @return string Data to be written to a cache file.
	 * @throws <b>ConfigurationException</b> If a requested configuration file
	 *                                       does not exist or is not readable.
	 * @throws <b>ParseException</b> If a requested configuration file is
	 *                               improperly formatted.
	 */
	public function & execute ($config) {

		// set our required categories list and initialize our handler
		$categories = array('required_categories' => array('db_interface'));

		$this->initialize($categories);

		// parse the ini
		$ini = $this->parseIni($config);

		$this->validate($ini, $config);

		$data = array();
		$data[] = "interface " . $ini['db_interface']['INTERFACE'] . " {";
		
		$data[] = "\t/*   LINK TYPES   */";
		/* @var $db_form BasicForm */
		$db_form = new $ini['db_interface']['FORM']();
		$results = $db_form->queryAll();
		/* @var $db_form BasicForm */
		foreach($results as $result) {
			$value_method = "getId";
			if (array_key_exists("VALUE_METHOD", $ini['db_interface'])) {
				$value_method = $ini['db_interface']['VALUE_METHOD'];		
			}
			if (method_exists($result, $ini['db_interface']['FORM_METHOD'])) {
				if (method_exists($result, $value_method)) {
					if ($value_method != "getId") {
						$data[] = "\tCONST " . $ini['db_interface']['PREFIX'] . $result->{$ini['db_interface']['FORM_METHOD']}() . " = \"" . $result->{$value_method}() . "\";";
					} else {
						$data[] = "\tCONST " . $ini['db_interface']['PREFIX'] . $result->{$ini['db_interface']['FORM_METHOD']}() . " = " . $result->{$value_method}() . ";";
					}
				} else {
					$data[] = "\tCONST " . $ini['db_interface']['PREFIX'] . $result->{$ini['db_interface']['FORM_METHOD']}() . " = " . $result->getId() . ";";
				}
			} else {
				// missing required key
				$error = 'Configuration file "%s" specifies FORM_METHOD "%s" that does not exist in the "%s" form.';
				$error = sprintf($error, $config, $ini['db_interface']['FORM_METHOD'], $ini['db_interface']['FORM']);
				throw new ParseException($error);	
			}
		}
		
		$data[] = "}";

		// compile data
		$retval = "<?php\n" .
		"// auth-generated by ModuleConfigHandler\n" .
		"// date: %s\n%s\n?>";

		$retval = sprintf($retval, date('m/d/Y H:i:s'), implode("\n", $data));
		return $retval;
	}
	
	/**
	 * Validates the incoming data
	 * @param array $ini
	 */
	function validate($ini, $config) {
		// set our required keys and validate that they exist
		$required_keys = array("ENABLED", "MODULE", "MODEL", "FORM", "FORM_METHOD", "PREFIX", "INTERFACE");
		
		foreach ($required_keys as $required_key) {
			// verify each key is set
			if (!isset($ini['db_interface'][$required_key])) {
				// missing required key
				$error = 'Configuration file "%s" does not specify the "%s" key under the [db_interface] category.';
				$error = sprintf($error, $config, $required_key);
				throw new ParseException($error);
			} else if (trim($ini['db_interface'][$required_key]) == "") {
				// blank required key
				$error = 'Configuration file "%s" specifies blank "%s" key under the [db_interface] category.';
				$error = sprintf($error, $config, $required_key);
				throw new ParseException($error);
			}
		}
	}
}