<?php

// +---------------------------------------------------------------------------+
// | This file is part of the Agavi package.                                   |
// | Copyright (c) 2003-2005  Sean Kerr.                                       |
// |                                                                           |
// | For the full copyright and license information, please view the LICENSE   |
// | file that was distributed with this source code. You can also view the    |
// | LICENSE file online at http://www.agavi.org/LICENSE.txt                   |
// |   vi: set noexpandtab:                                                    |
// |   Local Variables:                                                        |
// |   indent-tabs-mode: t                                                     |
// |   End:                                                                    |
// +---------------------------------------------------------------------------+

/**
 * LoggingConfigHandler allows you to register loggers with the system.
 *
 * @package    agavi
 * @subpackage config
 *
 * @author    Sean Kerr (skerr@mojavi.org)
 * @author    Bob Zoller (bob@agavi.org)
 * @copyright (c) Authors
 * @since     0.9.1
 * @version   $Id$
 */
class LoggingConfigHandler extends IniConfigHandler
{

	// +-----------------------------------------------------------------------+
	// | METHODS                                                               |
	// +-----------------------------------------------------------------------+

	/**
	 * Execute this configuration handler.
	 *
	 * @param string An absolute filesystem path to a configuration file.
	 *
	 * @return string Data to be written to a cache file.
	 *
	 * @throws <b>UnreadableException</b> If a requested configuration file
	 *                                    does not exist or is not readable.
	 * @throws <b>ParseException</b> If a requested configuration file is
	 *                               improperly formatted.
	 *
	 * @author Sean Kerr (skerr@mojavi.org)
	 * @since  0.9.0
	 */
	public function & execute ($config)
	{

		// set our required categories list and initialize our handler
		$categories = array('required_categories' => array('loggers'));

		$this->initialize($categories);

		// parse the ini
		$ini = $this->parseIni($config);

		// init our data, includes, methods, appenders and appenders arrays
		$data      = array();
		$loggers   = array();
		$appenders = array();
		$layouts   = array();

		// get a list of loggers and their registered appenders/params
		foreach ($ini['loggers'] as $key => &$value) {

			$value = trim($value);

			// is this category already registered?
			if (in_array($value, $loggers)) {
				// this category is already registered
				$error = 'Configuration file "%s" specifies previously ' .
				  'registered category "%s"';
				$error = sprintf($error, $config, $value);
				throw new ParseException($error);
			}

			// see if we have the category registered for this logger
			if (!isset($ini[$value])) {
				// missing required key
				$error = 'Configuration file "%s" specified nonexistent ' .
				  'category "%s"';
				$error = sprintf($error, $config, $value);
				throw new ParseException($error);
			}

			$this->loadLogger($config, $key, $loggers, $appenders, $ini, $value);

		}

		$this->loadAppenders($config, $loggers, $appenders, $layouts, $ini);

		$this->loadLayouts($config, $loggers, $appenders, $layouts, $ini);

		$this->generateRegistration($data, $loggers, $appenders, $layouts);

		// compile data
		$retval = "<?php\n" .
				  "// auto-generated by LoggingConfigHandler\n" .
				  "// date: %s\n%s\n?>";
		$retval = sprintf($retval, date('m/d/Y H:i:s'),
						  implode("\n", $data));

		return $retval;

	}

	// -------------------------------------------------------------------------

	/**
	 * Generate raw cache data.
	 *
	 * @param string A request method.
	 * @param array  The data array where our cache code will be appended.
	 * @param array  An associative array of request method data.
	 * @param array  An associative array of file/parameter data.
	 * @param array  A validators array.
	 *
	 * @author Sean Kerr (skerr@mojavi.org)
	 * @author Bob Zoller (bob@agavi.org)
	 * @author Veikko MÃ¤kinen (mail@veikkomakinen.com
	 * @since  0.9.0
	 */
	private function generateRegistration(&$data, &$loggers, &$appenders, &$layouts)
	{
		foreach ($layouts as $name => &$layout) {
			$str = '$%s = new %s;';
			$data[] = sprintf($str, strtolower($name), $layout['class']);
			if (isset($layout['params'])) {
				$str = '$%s->initialize(%s);';
				$data[] = sprintf($str, strtolower($name), $layout['params']);
			}
		}

		foreach ($appenders as $name => &$appender) {
			$str = '$%s = new %s;';
			$data[] = sprintf($str, strtolower($name), $appender['class']);
			if (isset($appender['params'])) {
				$str = '$%s->initialize(%s);';
				$data[] = sprintf($str, strtolower($name), $appender['params']);
			}
			$str = '$%s->setLayout($%s);';
			$data[] = sprintf($str, strtolower($name), strtolower($appender['layout']));
			if (isset($appender['priority'])) {
				$str = '$%s->setPriority(%s);';
				$data[] = sprintf($str, strtolower($name), $appender['priority']);
			}
		}

		foreach ($loggers as $name => &$logger) {
			$str = '$%s = new %s;';
			$data[] = sprintf($str, strtolower($name), $logger['class']);
			foreach ($logger['appenders'] as &$appender) {
				$str = '$%s->setAppender("%s", $%s);';
				$data[] = sprintf($str, strtolower($name), $appender, strtolower($appender));
			}
			if (isset($logger['priority'])) {
				$str = '$%s->setPriority(%s);';
				$data[] = sprintf($str, strtolower($name), $logger['priority']);
			}
			$str = 'LoggerManager::setLogger("%s", $%s);';
			$data[] = sprintf($str, $name, strtolower($name));
		}

	}

	// -------------------------------------------------------------------------

	/**
	 * Load the linear list of attributes from the [appenders] category.
	 *
	 * @param string The configuration file name (for exception usage).
	 * @param array  An associative array of request method data.
	 * @param array  An associative array of file/parameter appenders in which to
	 *               store loaded information.
	 * @param array  An associative array of validator data.
	 * @param array  The loaded ini configuration that we'll use for
	 *               verification purposes.
	 * @param string A comma delimited list of file/parameter names.
	 *
	 * @return void
	 *
	 * @author Sean Kerr (skerr@mojavi.org)
	 * @since  0.9.0
	 */
	private function loadAppenders(&$config, &$loggers, &$appenders, &$layouts, &$ini)
	{

		foreach (array_keys($appenders) as $appender) {
			if (!isset($ini[$appender]['class']) || !isset($ini[$appender]['layout'])) {
				$error = 'Configuration file "%s" has section "%s" without a class/layout key';
				$error = sprintf($error, $config, $appender);
				throw new ParseException($error);
			}

			$entry = array();
			$entry['class'] = $ini[$appender]['class'];
			if (!isset($ini[$ini[$appender]['layout']])) {
				$error = 'Configuration file "%s" specifies layout ' .
						 '"%s", but it has no section';
				$error = sprintf($error, $config, $ini[$appender]['layout']);
				throw new ParseException($error);
			}
			if (!isset($layouts[$ini[$appender]['layout']])) {
				$layouts[$ini[$appender]['layout']] = null;
			}
			$entry['layout'] = $ini[$appender]['layout'];
			
			if (isset($ini[$appender]['priority'])) {
				$entry['priority'] = $ini[$appender]['priority'];
			}
			
			$entry['params'] = ParameterParser::parse($ini[$appender]);

			$appenders[$appender] = $entry;
		}
	}

	private function loadLayouts(&$config, &$loggers, &$appenders, &$layouts, &$ini)
	{

		foreach (array_keys($layouts) as $layout) {
			if (!isset($ini[$layout]['class'])) {
				$error = 'Configuration file "%s" has section "%s" without a class key';
				$error = sprintf($error, $config, $layout);
				throw new ParseException($error);
			}

			$entry = array();
			$entry['class'] = $ini[$layout]['class'];
			$entry['params'] = ParameterParser::parse($ini[$layout]);

			$layouts[$layout] = $entry;
		}
	}

	// -------------------------------------------------------------------------

	/**
	 * Load all request methods and the file/parameter names that will be
	 * validated from the [methods] category.
	 *
	 * @param string The configuration file name (for exception usage).
	 * @param string A Logger "instance" name.
	 * @param array  An associative array of request method data.
	 * @param array  An associative array of file/parameter appenders in which to
	 *               store loaded information.
	 * @param array  The loaded ini configuration that we'll use for
	 *               verification purposes.
	 *
	 * @return void
	 *
	 * @author Sean Kerr (skerr@mojavi.org)
	 * @since  0.9.0
	 */
	private function loadLogger(&$config, &$logger, &$loggers, &$appenders, &$ini, &$category)
	{

		if (!isset($ini[$category]['class']) || (trim($ini[$category]['class']) == '')) {
				// missing/empty class key
				$error = 'Configuration file "%s" specifies logger ' .
						 '"%s", with missing/empty class key';
				$error = sprintf($error, $config, $category);
				throw new ParseException($error);
		}

		if (!isset($ini[$category]['appenders']) || (trim($ini[$category]['appenders']) == '')) {
				// missing/empty appenders key
				$error = 'Configuration file "%s" specifies logger ' .
						 '"%s", with missing/empty appenders key';
				$error = sprintf($error, $config, $category);
				throw new ParseException($error);
		}

		$loggers[$logger]['class'] = $ini[$category]['class'];

		// explode the list of names
		$array = explode(',', $ini[$category]['appenders']);

		// loop through the names
		foreach ($array as $name) {
			$name = trim($name);

			// make sure we have the required status of this file or parameter
			if (!isset($ini[$name])) {
				// missing section
				$error = 'Configuration file "%s" specifies appender ' .
						 '"%s", but it has no section';
				$error = sprintf($error, $config, $name);
				throw new ParseException($error);
			}

			if (!isset($appenders[$name])) {
				$appenders[$name] = array();
			}

			// add this appender to the current request method
			$loggers[$logger]['appenders'][] = $name;
		}

		if (isset($ini[$category]['priority'])) {
			$loggers[$logger]['priority'] = $ini[$category]['priority'];
		}

		$loggers[$logger]['params'] =& ParameterParser::parse($ini[$category]);

	}

}

?>
